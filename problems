# problem 1

# Write a function named right_justify that takes a string named s as a parameter and prints the
# string with enough leading spaces so that the last letter of the string is in column 70 of the
# Display.

def right_justify(s):
    print "%70s" % s



# problem 2

# Write a function named saddle_points to search for the "saddle points" in a 5 by 5 array of integers.
# A saddle point is a cell whose value is greater than or equal to any in its row, and less than or equal
# to any in its column. There may be more than one saddle point in the array. Return a list (vector, array)
# of coordinates of any saddle points your program finds. Return empty list if there are none.

def saddle_points(matrix: Sequence[Sequence[int]]) -> Set[Tuple[int, int]]:





# problem 3

# Two words are anagrams if you can rearrange the letters from one to spell
# the other. Write a function called is_anagram that takes two strings and
# returns True if they are anagrams.

stringOne = "boom"
stringTwo = "doom"


def is_anagram(stringOne, stringTwo):
    print sorted(stringOne) == sorted(stringTwo)

is_anagram(stringOne, stringTwo)
    
    
    
# problem 4

# Write a program that will play the Hi-Lo guessing game. The user picks a secret number between 1
# and 100. The computer tries to guess the number in less than five turns. When the computer makes 
# a guess, the user enters a hint; the letter 'H' indicates the computer's guess was too high, the 
# letter 'L' means the computer guessed too low.The program should use the hint to revise its guess.
# If the user enters the letter 'W' that means the computer guessed the number correctly and the. 
# computer should reply "I won". If the computer takes 5 guesses without winning it should print a
# message "I lost"

user_number = int(input("Pick a number between 1 and 100: "))
times = 1
pc_guess = random.randint(1, 100)

while pc_guess != user_number: 
    times+=1 
    if times>5: 
        print("I lost")
        break
elif guess > the_number: 
        print("L")
    else: 
        print("H")        

pc_guess = random.randint(1, 100)
    print( pc_guess,"?")
    print("W")
    
if pc_guess == user_number:
    print("I won")
    
    
    
# problem 5    

# The following functions are all intended to check whether a string contains any lowercase
# letters, but at least some of them are wrong. For each function, describe what the function
# actually does (assuming that the parameter is a string).

def any_lowercase1(s):
    for c in s:
        if c.islower():
            return True
        else:
            return False
            
# exp; 
# Function will provide wrong answer.In case of "Captain",
# if "C" => c.lower() ,program=> False ,which isn't correct
# (even if there is a lowercase letter). This tests if the 
# first letter i\s lowercase with True or False after the 
# first letter 


def any_lowercase2(s):
    for c in s:
        if 'c'.islower():
            return 'True'
        else:
            return 'False'
            
# exp;
# Function will always proide "True" as the answer. This asks 
# if the string 'c' is lowercase, despite what string contains.
# If we take string  "EXPLOIT" for example, it will start with
# "E".It will test if 'c' is lowercase and it would tell that 
# there are lowercase letters when there are none


def any_lowercase3(s):
    for c in s:
        flag = c.islower()
    return flag

# exp;
# Function has a small flaw.For example, string " phOne", it will set
# 'flag' to True for "p", "h", "n", "e" which is what we need, but for
# "O",'flag' set's it for False, and it indicates that thereare no 
# lowercase letters, which is obviously not true


def any_lowercase4(s):
    flag = False
    for c in s:
        flag = flag or c.islower()
    return flag

# exp;
# Function will work as written.'flag' will remain False (as it's set)
# for every c in s if it's not c.lowercase(). 'flag'=> True pr False=>
# True, if assigned again, no uppercase or lowercase letter can change
# it back to False


def any_lowercase5(s):
    for c in s:
        if not c.islower():
            return False
    return True

# exp;
# Function tests wheter all letters are lowercase or not.for example,
# the word "booK", "b", "o" and "o" passes, while "K; not, so the 
# outcome will be Fasle



